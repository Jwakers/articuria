"use client";

import { getTranscriptionData } from "@/app/server/assembly-ai/assembly-ai-actions";
import { generateTableTopicReport } from "@/app/server/openai/openai-actions";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableFooter,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { api } from "@/convex/_generated/api";
import { Doc, Id } from "@/convex/_generated/dataModel";
import { useUser } from "@/hooks/use-user";
import { disfluencyData } from "@/lib/utils";
import type { Transcript as TranscriptData } from "assemblyai";
import { useQuery } from "convex/react";
import { ArrowRight, Loader2, Play } from "lucide-react";
import { useEffect, useTransition } from "react";
import { toast } from "sonner";

type TranscriptProps = {
  videoId: Id<"videos">;
};

export default function Transcript({ videoId }: TranscriptProps) {
  const { accountLimits } = useUser();
  const video = useQuery(api.videos.getById, {
    videoId,
  });
  const transcript = useQuery(api.transcripts.get, {
    transcriptId: video?.transcript,
  });
  const report = useQuery(api.reports.get, {
    reportId: video?.report,
  });
  const [transcriptPending, startTranscriptTransition] = useTransition();
  const [reportPending, startReportTransition] = useTransition();
  const transcriptData = transcript?.data as TranscriptData | undefined;
  const audioReady = video?.audioRenditionStatus === "READY";

  const handleGenerateTranscript = async () => {
    startTranscriptTransition(async () => {
      if (transcript || !video) {
        toast.error("Transcript already exists");
        return;
      }
      try {
        const { error } = await getTranscriptionData(video._id);

        if (error) {
          toast.error(error);
          return;
        }
      } catch (err) {
        toast.error("Unexpected error while requesting transcription");
        console.error(err);
      }
    });
  };

  const getPlayer = () => {
    return document.querySelector<HTMLVideoElement>(
      `[playback-id="${video?.publicPlaybackId}"]`,
    );
  };

  const playVideoFrom = (timestamp: number) => {
    const player = getPlayer();
    if (!player) {
      console.warn("Unable to find player");
      return;
    }

    player.currentTime = timestamp;
    player.play();
    player.scrollIntoView({
      behavior: "smooth",
    });
  };

  useEffect(() => {
    if (!transcript || video?.report || report || reportPending) return;
    console.log("Generating report");
    const generateReport = async () => {
      if (!video?._id) {
        toast.error("No video ID");
        return;
      }
      const { error } = await generateTableTopicReport(videoId);
      if (error) {
        toast.error(error);
        return;
      }
    };
    startReportTransition(async () => {
      await generateReport();
    });
  }, [report, transcript, reportPending]);

  if (
    accountLimits &&
    (!accountLimits.tableTopicReport || !accountLimits.tableTopicTranscription)
  ) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>
            <h2 className="text-lg font-semibold md:text-xl">
              Transcript &amp; Feedback
            </h2>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p>Transcription and reporting can only be generated by pro users</p>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>
          <h2 className="text-lg font-semibold md:text-xl">
            Transcript &amp; Feedback
          </h2>
        </CardTitle>
      </CardHeader>
      <CardContent>
        {!report && !audioReady ? (
          <div className="text-muted-foreground flex items-center gap-2">
            <span>Processing audio...</span>
            <Loader2 className="animate-spin" />
          </div>
        ) : null}
        {!transcript && !transcriptPending && audioReady ? (
          <div className="space-y-2">
            <p className="text-muted-foreground">
              Here you can generate a transcript and feedback on your table
              topic performance
            </p>
            <Button
              onClick={handleGenerateTranscript}
              disabled={transcriptPending}
            >
              <span>
                {!transcriptPending
                  ? "Generate transcript and feedback"
                  : "Generating..."}
              </span>
              {!transcriptPending ? (
                <ArrowRight />
              ) : (
                <Loader2 className="animate-spin" />
              )}
            </Button>
          </div>
        ) : null}

        {transcript ? (
          <div className="space-y-4">
            <ReportTable report={report ?? null} />

            {transcript && !report && reportPending ? (
              <div className="text-muted-foreground flex items-center gap-2">
                <span>Generating report...</span>
                <Loader2 className="animate-spin" />
              </div>
            ) : null}
            <div className="bg-muted rounded border shadow-inner">
              <Table className="border-b">
                <TableHeader>
                  <TableRow className="border-none">
                    <TableHead className="border-r">Time</TableHead>
                    <TableHead>Text</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {transcriptData?.sentiment_analysis_results?.length ? (
                    transcriptData?.sentiment_analysis_results?.map((item) => {
                      return (
                        <TableRow className="border-none" key={item.start}>
                          <TableCell className="border-r py-0">
                            <button
                              className="group flex w-full items-center justify-between gap-1"
                              type="button"
                              onClick={() => playVideoFrom(item.start / 1000)}
                            >
                              <span className="text-muted-foreground text-xs">
                                {(item.start / 1000).toFixed(2)}s
                              </span>
                              <Play className="w-3 opacity-0 transition-opacity group-hover:opacity-100" />
                            </button>
                          </TableCell>
                          <TableCell className="py-0">{item.text}</TableCell>
                        </TableRow>
                      );
                    })
                  ) : (
                    <TableRow>
                      <TableCell
                        colSpan={2}
                        className="text-muted-foreground py-2 text-center"
                      >
                        No transcript data available
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
                <TableCaption className="text-muted-foreground pb-4 text-center text-sm">
                  Transcript generated{" "}
                  {new Date(transcript._creationTime).toLocaleDateString()}
                </TableCaption>
              </Table>
            </div>
            <GeneralTable transcript={transcript ?? null} />
            <FillerWordReport transcript={transcript ?? null} />
          </div>
        ) : null}
      </CardContent>
    </Card>
  );
}

function GeneralTable({ transcript }: { transcript: Doc<"transcripts"> }) {
  const transcriptData = transcript?.data as TranscriptData | undefined;
  if (!transcript || !transcriptData) return null;

  return (
    <Table className="mt-4">
      <TableHeader>
        <TableRow>
          <TableHead>Word count</TableHead>
          <TableHead>Words per minute</TableHead>
          <TableHead>Total duration</TableHead>
          <TableHead>Speaking duration</TableHead>
        </TableRow>
      </TableHeader>
      <TableBody>
        <TableRow>
          <TableCell>{transcriptData.words?.length}</TableCell>
          <TableCell>{transcript.wordsPerMinute}</TableCell>
          <TableCell>
            {((transcriptData.audio_duration ?? 0) / 60).toFixed(2)}
          </TableCell>
          <TableCell>
            {((transcript.speakingDuration ?? 0) / 1000 / 60).toFixed(2)}
          </TableCell>
        </TableRow>
      </TableBody>
    </Table>
  );
}

function ReportTable({ report }: { report: Doc<"reports"> | null }) {
  if (!report) return null;

  return (
    <section>
      <div className="prose dark:prose-invert mx-auto text-center">
        <div className="text-2xl font-medium">Report</div>
        <p className="text-xl font-medium">Short summary</p>
        <p className="text-balance">{report.shortSummary}</p>
      </div>

      <Accordion type="single" collapsible>
        <AccordionItem value="creativity">
          <AccordionTrigger className="text-lg font-medium">
            <div className="flex w-full items-center gap-4">
              <span>Creativity</span>
              <span className="bg-muted text-muted-foreground flex size-6 items-center justify-center rounded-full text-sm font-bold">
                {report.creativityScore}
              </span>
            </div>
          </AccordionTrigger>
          <AccordionContent className="prose dark:prose-invert">
            <p>{report.creativity}</p>
          </AccordionContent>
        </AccordionItem>
        <AccordionItem value="clarity">
          <AccordionTrigger className="text-lg font-medium">
            <div className="flex w-full items-center gap-4">
              <span>Clarity</span>
              <span className="bg-muted text-muted-foreground flex size-6 items-center justify-center rounded-full text-sm font-bold">
                {report.clarityScore}
              </span>{" "}
            </div>
          </AccordionTrigger>
          <AccordionContent className="prose dark:prose-invert">
            <p>{report.clarity}</p>
          </AccordionContent>
        </AccordionItem>
        <AccordionItem value="engagement">
          <AccordionTrigger className="text-lg font-medium">
            <div className="flex w-full items-center gap-4">
              <span>Engagement</span>
              <span className="bg-muted text-muted-foreground flex size-6 items-center justify-center rounded-full text-sm font-bold">
                {report.engagementScore}
              </span>{" "}
            </div>
          </AccordionTrigger>
          <AccordionContent className="prose dark:prose-invert">
            <p>{report.engagement}</p>
          </AccordionContent>
        </AccordionItem>
        <AccordionItem value="pacing">
          <AccordionTrigger className="text-lg font-medium">
            <div className="flex w-full items-center gap-4">
              <span>Pacing</span>
              <span className="bg-muted text-muted-foreground flex size-6 items-center justify-center rounded-full text-sm font-bold">
                {report.pacingScore}
              </span>{" "}
            </div>
          </AccordionTrigger>
          <AccordionContent className="prose dark:prose-invert">
            <p>{report.pacing}</p>
          </AccordionContent>
        </AccordionItem>
        <AccordionItem value="language">
          <AccordionTrigger className="text-lg font-medium">
            <div className="flex w-full items-center gap-4">
              <span>Language</span>
              <span className="bg-muted text-muted-foreground flex size-6 items-center justify-center rounded-full text-sm font-bold">
                {report.languageScore}
              </span>{" "}
            </div>
          </AccordionTrigger>
          <AccordionContent className="prose dark:prose-invert">
            <p>{report.language}</p>
          </AccordionContent>
        </AccordionItem>
        <AccordionItem value="tone">
          <AccordionTrigger className="text-lg font-medium">
            <div className="flex w-full items-center gap-4">
              <span>Tone</span>
              <span className="bg-muted text-muted-foreground flex size-6 items-center justify-center rounded-full text-sm font-bold">
                {report.toneScore}
              </span>{" "}
            </div>
          </AccordionTrigger>
          <AccordionContent className="prose dark:prose-invert">
            <p>{report.tone}</p>
          </AccordionContent>
        </AccordionItem>
      </Accordion>
      <p className="my-4">
        Average score: <span className="font-bold">{report.averageScore}</span>
      </p>
      <div className="prose dark:prose-invert">
        <div>
          <div className="text-xl font-medium">Recommendations</div>
          <ul>
            {report.recommendations?.map((item) => <li key={item}>{item}</li>)}
          </ul>
        </div>
        <div>
          <div className="text-xl font-medium">Commendations</div>
          <ul>
            {report.commendations?.map((item) => <li key={item}>{item}</li>)}
          </ul>
        </div>
        <div>
          <p className="text-xl font-medium">Full summary</p>
          <p>{report.summary}</p>
        </div>
      </div>
    </section>
  );
}

function FillerWordReport({ transcript }: { transcript: Doc<"transcripts"> }) {
  const transcriptData = transcript?.data as TranscriptData | undefined;
  if (!transcript || !transcriptData) return null;
  if (!transcriptData?.text?.length) return null;

  const data = disfluencyData(transcriptData.text ?? "");
  const fillerWords = Object.entries(data).map(([word, count]) => ({
    word,
    count,
  }));

  return (
    <Table className="mt-4">
      <TableHeader>
        <TableRow>
          <TableHead>Filler Word</TableHead>
          <TableHead>Count</TableHead>
        </TableRow>
      </TableHeader>
      <TableBody>
        {fillerWords.map(({ word, count }) => (
          <TableRow key={word}>
            <TableCell>{word}</TableCell>
            <TableCell>{count}</TableCell>
          </TableRow>
        ))}
      </TableBody>
      <TableFooter>
        <TableRow>
          <TableCell />
          <TableCell>
            Total: <span>{transcript?.fillerWordCount}</span>
          </TableCell>
        </TableRow>
      </TableFooter>
    </Table>
  );
}
